// <auto-generated />
using CliniqueInfrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CliniqueInfrastructure.Migrations
{
    [DbContext(typeof(CliniqueDbContext))]
    partial class CliniqueDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("CliniqueDomain.Models.Maladie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pathologie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Maladies", (string)null);
                });

            modelBuilder.Entity("CliniqueDomain.Models.Medecin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("Medecin", (string)null);
                });

            modelBuilder.Entity("CliniqueDomain.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaladieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedecinId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MaladieId");

                    b.HasIndex("MedecinId");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("CliniqueDomain.Models.Soin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Durees")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeSoin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("prix")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Soins", (string)null);
                });

            modelBuilder.Entity("CliniqueDomain.Models.Traitement", b =>
                {
                    b.Property<int>("SoinId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaladieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SoinId", "MaladieId");

                    b.HasIndex("MaladieId");

                    b.ToTable("Traitements");
                });

            modelBuilder.Entity("CliniqueDomain.Models.Patient", b =>
                {
                    b.HasOne("CliniqueDomain.Models.Maladie", "Maladie")
                        .WithMany("Patients")
                        .HasForeignKey("MaladieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CliniqueDomain.Models.Medecin", "Medecin")
                        .WithMany("Patients")
                        .HasForeignKey("MedecinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maladie");

                    b.Navigation("Medecin");
                });

            modelBuilder.Entity("CliniqueDomain.Models.Traitement", b =>
                {
                    b.HasOne("CliniqueDomain.Models.Maladie", "Maladie")
                        .WithMany()
                        .HasForeignKey("MaladieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CliniqueDomain.Models.Soin", "Soin")
                        .WithMany()
                        .HasForeignKey("SoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maladie");

                    b.Navigation("Soin");
                });

            modelBuilder.Entity("CliniqueDomain.Models.Maladie", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("CliniqueDomain.Models.Medecin", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
